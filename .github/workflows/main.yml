name: XRNX Deploy (1 Folder -> 1 XRNX)

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  package-and-release:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v2

      # Step 2: Package each .xrnx folder
      - name: Package XRNX Files
        run: |
          mkdir -p xrnx_packages
          find . -type d -name "*.xrnx" | while read -r xrnx_dir; do
            xrnx_name=$(basename "$xrnx_dir")
            echo "Zipping $xrnx_name..."
            (cd "$xrnx_dir" && zip -r "../xrnx_packages/$xrnx_name" .)
          done
          ls -l xrnx_packages/

      # Step 3: Generate a tag name
      - name: Generate Tag Name
        run: |
          echo "TAG_NAME=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_ENV

      # Step 4: Create and push a tag
      - name: Create and Push Tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag $TAG_NAME
          git push origin $TAG_NAME
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Step 5: Create a GitHub release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          release_name: Release ${{ env.TAG_NAME }}
          draft: false
          prerelease: false

      # Step 6: Upload each .xrnx file to the release
      - name: Upload XRNX Files to Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          for asset_path in xrnx_packages/*; do
            asset_name=$(basename "$asset_path")
            echo "Uploading $asset_name..."
            curl \
              -X POST \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Content-Type: application/octet-stream" \
              --form "file=@$asset_path" \
              "${{ steps.create_release.outputs.upload_url }}&name=$asset_name"
          done
